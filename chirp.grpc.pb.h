// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: chirp.proto
#ifndef GRPC_chirp_2eproto__INCLUDED
#define GRPC_chirp_2eproto__INCLUDED

#include "chirp.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace chirp {

class KeyValueStore final {
 public:
  static constexpr char const* service_full_name() {
    return "chirp.KeyValueStore";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status put(::grpc::ClientContext* context, const ::chirp::PutRequest& request, ::chirp::PutReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chirp::PutReply>> Asyncput(::grpc::ClientContext* context, const ::chirp::PutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chirp::PutReply>>(AsyncputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chirp::PutReply>> PrepareAsyncput(::grpc::ClientContext* context, const ::chirp::PutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chirp::PutReply>>(PrepareAsyncputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::chirp::GetRequest, ::chirp::GetReply>> get(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::chirp::GetRequest, ::chirp::GetReply>>(getRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::chirp::GetRequest, ::chirp::GetReply>> Asyncget(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::chirp::GetRequest, ::chirp::GetReply>>(AsyncgetRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::chirp::GetRequest, ::chirp::GetReply>> PrepareAsyncget(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::chirp::GetRequest, ::chirp::GetReply>>(PrepareAsyncgetRaw(context, cq));
    }
    virtual ::grpc::Status deletekey(::grpc::ClientContext* context, const ::chirp::DeleteRequest& request, ::chirp::DeleteReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chirp::DeleteReply>> Asyncdeletekey(::grpc::ClientContext* context, const ::chirp::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chirp::DeleteReply>>(AsyncdeletekeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chirp::DeleteReply>> PrepareAsyncdeletekey(::grpc::ClientContext* context, const ::chirp::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chirp::DeleteReply>>(PrepareAsyncdeletekeyRaw(context, request, cq));
    }
    virtual ::grpc::Status registeruser(::grpc::ClientContext* context, const ::chirp::RegisterRequest& request, ::chirp::RegisterReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chirp::RegisterReply>> Asyncregisteruser(::grpc::ClientContext* context, const ::chirp::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chirp::RegisterReply>>(AsyncregisteruserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chirp::RegisterReply>> PrepareAsyncregisteruser(::grpc::ClientContext* context, const ::chirp::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chirp::RegisterReply>>(PrepareAsyncregisteruserRaw(context, request, cq));
    }
    virtual ::grpc::Status chirp(::grpc::ClientContext* context, const ::chirp::ChirpRequest& request, ::chirp::ChirpReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chirp::ChirpReply>> Asyncchirp(::grpc::ClientContext* context, const ::chirp::ChirpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chirp::ChirpReply>>(AsyncchirpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chirp::ChirpReply>> PrepareAsyncchirp(::grpc::ClientContext* context, const ::chirp::ChirpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chirp::ChirpReply>>(PrepareAsyncchirpRaw(context, request, cq));
    }
    virtual ::grpc::Status follow(::grpc::ClientContext* context, const ::chirp::FollowRequest& request, ::chirp::FollowReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chirp::FollowReply>> Asyncfollow(::grpc::ClientContext* context, const ::chirp::FollowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chirp::FollowReply>>(AsyncfollowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chirp::FollowReply>> PrepareAsyncfollow(::grpc::ClientContext* context, const ::chirp::FollowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chirp::FollowReply>>(PrepareAsyncfollowRaw(context, request, cq));
    }
    virtual ::grpc::Status read(::grpc::ClientContext* context, const ::chirp::ReadRequest& request, ::chirp::ReadReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chirp::ReadReply>> Asyncread(::grpc::ClientContext* context, const ::chirp::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chirp::ReadReply>>(AsyncreadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chirp::ReadReply>> PrepareAsyncread(::grpc::ClientContext* context, const ::chirp::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chirp::ReadReply>>(PrepareAsyncreadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::chirp::MonitorReply>> monitor(::grpc::ClientContext* context, const ::chirp::MonitorRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::chirp::MonitorReply>>(monitorRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::chirp::MonitorReply>> Asyncmonitor(::grpc::ClientContext* context, const ::chirp::MonitorRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::chirp::MonitorReply>>(AsyncmonitorRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::chirp::MonitorReply>> PrepareAsyncmonitor(::grpc::ClientContext* context, const ::chirp::MonitorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::chirp::MonitorReply>>(PrepareAsyncmonitorRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void put(::grpc::ClientContext* context, const ::chirp::PutRequest* request, ::chirp::PutReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void deletekey(::grpc::ClientContext* context, const ::chirp::DeleteRequest* request, ::chirp::DeleteReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void registeruser(::grpc::ClientContext* context, const ::chirp::RegisterRequest* request, ::chirp::RegisterReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void chirp(::grpc::ClientContext* context, const ::chirp::ChirpRequest* request, ::chirp::ChirpReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void follow(::grpc::ClientContext* context, const ::chirp::FollowRequest* request, ::chirp::FollowReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void read(::grpc::ClientContext* context, const ::chirp::ReadRequest* request, ::chirp::ReadReply* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chirp::PutReply>* AsyncputRaw(::grpc::ClientContext* context, const ::chirp::PutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chirp::PutReply>* PrepareAsyncputRaw(::grpc::ClientContext* context, const ::chirp::PutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::chirp::GetRequest, ::chirp::GetReply>* getRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::chirp::GetRequest, ::chirp::GetReply>* AsyncgetRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::chirp::GetRequest, ::chirp::GetReply>* PrepareAsyncgetRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chirp::DeleteReply>* AsyncdeletekeyRaw(::grpc::ClientContext* context, const ::chirp::DeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chirp::DeleteReply>* PrepareAsyncdeletekeyRaw(::grpc::ClientContext* context, const ::chirp::DeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chirp::RegisterReply>* AsyncregisteruserRaw(::grpc::ClientContext* context, const ::chirp::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chirp::RegisterReply>* PrepareAsyncregisteruserRaw(::grpc::ClientContext* context, const ::chirp::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chirp::ChirpReply>* AsyncchirpRaw(::grpc::ClientContext* context, const ::chirp::ChirpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chirp::ChirpReply>* PrepareAsyncchirpRaw(::grpc::ClientContext* context, const ::chirp::ChirpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chirp::FollowReply>* AsyncfollowRaw(::grpc::ClientContext* context, const ::chirp::FollowRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chirp::FollowReply>* PrepareAsyncfollowRaw(::grpc::ClientContext* context, const ::chirp::FollowRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chirp::ReadReply>* AsyncreadRaw(::grpc::ClientContext* context, const ::chirp::ReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chirp::ReadReply>* PrepareAsyncreadRaw(::grpc::ClientContext* context, const ::chirp::ReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::chirp::MonitorReply>* monitorRaw(::grpc::ClientContext* context, const ::chirp::MonitorRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::chirp::MonitorReply>* AsyncmonitorRaw(::grpc::ClientContext* context, const ::chirp::MonitorRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::chirp::MonitorReply>* PrepareAsyncmonitorRaw(::grpc::ClientContext* context, const ::chirp::MonitorRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status put(::grpc::ClientContext* context, const ::chirp::PutRequest& request, ::chirp::PutReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chirp::PutReply>> Asyncput(::grpc::ClientContext* context, const ::chirp::PutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chirp::PutReply>>(AsyncputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chirp::PutReply>> PrepareAsyncput(::grpc::ClientContext* context, const ::chirp::PutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chirp::PutReply>>(PrepareAsyncputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::chirp::GetRequest, ::chirp::GetReply>> get(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::chirp::GetRequest, ::chirp::GetReply>>(getRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::chirp::GetRequest, ::chirp::GetReply>> Asyncget(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::chirp::GetRequest, ::chirp::GetReply>>(AsyncgetRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::chirp::GetRequest, ::chirp::GetReply>> PrepareAsyncget(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::chirp::GetRequest, ::chirp::GetReply>>(PrepareAsyncgetRaw(context, cq));
    }
    ::grpc::Status deletekey(::grpc::ClientContext* context, const ::chirp::DeleteRequest& request, ::chirp::DeleteReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chirp::DeleteReply>> Asyncdeletekey(::grpc::ClientContext* context, const ::chirp::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chirp::DeleteReply>>(AsyncdeletekeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chirp::DeleteReply>> PrepareAsyncdeletekey(::grpc::ClientContext* context, const ::chirp::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chirp::DeleteReply>>(PrepareAsyncdeletekeyRaw(context, request, cq));
    }
    ::grpc::Status registeruser(::grpc::ClientContext* context, const ::chirp::RegisterRequest& request, ::chirp::RegisterReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chirp::RegisterReply>> Asyncregisteruser(::grpc::ClientContext* context, const ::chirp::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chirp::RegisterReply>>(AsyncregisteruserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chirp::RegisterReply>> PrepareAsyncregisteruser(::grpc::ClientContext* context, const ::chirp::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chirp::RegisterReply>>(PrepareAsyncregisteruserRaw(context, request, cq));
    }
    ::grpc::Status chirp(::grpc::ClientContext* context, const ::chirp::ChirpRequest& request, ::chirp::ChirpReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chirp::ChirpReply>> Asyncchirp(::grpc::ClientContext* context, const ::chirp::ChirpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chirp::ChirpReply>>(AsyncchirpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chirp::ChirpReply>> PrepareAsyncchirp(::grpc::ClientContext* context, const ::chirp::ChirpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chirp::ChirpReply>>(PrepareAsyncchirpRaw(context, request, cq));
    }
    ::grpc::Status follow(::grpc::ClientContext* context, const ::chirp::FollowRequest& request, ::chirp::FollowReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chirp::FollowReply>> Asyncfollow(::grpc::ClientContext* context, const ::chirp::FollowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chirp::FollowReply>>(AsyncfollowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chirp::FollowReply>> PrepareAsyncfollow(::grpc::ClientContext* context, const ::chirp::FollowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chirp::FollowReply>>(PrepareAsyncfollowRaw(context, request, cq));
    }
    ::grpc::Status read(::grpc::ClientContext* context, const ::chirp::ReadRequest& request, ::chirp::ReadReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chirp::ReadReply>> Asyncread(::grpc::ClientContext* context, const ::chirp::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chirp::ReadReply>>(AsyncreadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chirp::ReadReply>> PrepareAsyncread(::grpc::ClientContext* context, const ::chirp::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chirp::ReadReply>>(PrepareAsyncreadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::chirp::MonitorReply>> monitor(::grpc::ClientContext* context, const ::chirp::MonitorRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::chirp::MonitorReply>>(monitorRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::chirp::MonitorReply>> Asyncmonitor(::grpc::ClientContext* context, const ::chirp::MonitorRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::chirp::MonitorReply>>(AsyncmonitorRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::chirp::MonitorReply>> PrepareAsyncmonitor(::grpc::ClientContext* context, const ::chirp::MonitorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::chirp::MonitorReply>>(PrepareAsyncmonitorRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void put(::grpc::ClientContext* context, const ::chirp::PutRequest* request, ::chirp::PutReply* response, std::function<void(::grpc::Status)>) override;
      void deletekey(::grpc::ClientContext* context, const ::chirp::DeleteRequest* request, ::chirp::DeleteReply* response, std::function<void(::grpc::Status)>) override;
      void registeruser(::grpc::ClientContext* context, const ::chirp::RegisterRequest* request, ::chirp::RegisterReply* response, std::function<void(::grpc::Status)>) override;
      void chirp(::grpc::ClientContext* context, const ::chirp::ChirpRequest* request, ::chirp::ChirpReply* response, std::function<void(::grpc::Status)>) override;
      void follow(::grpc::ClientContext* context, const ::chirp::FollowRequest* request, ::chirp::FollowReply* response, std::function<void(::grpc::Status)>) override;
      void read(::grpc::ClientContext* context, const ::chirp::ReadRequest* request, ::chirp::ReadReply* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::chirp::PutReply>* AsyncputRaw(::grpc::ClientContext* context, const ::chirp::PutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chirp::PutReply>* PrepareAsyncputRaw(::grpc::ClientContext* context, const ::chirp::PutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::chirp::GetRequest, ::chirp::GetReply>* getRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::chirp::GetRequest, ::chirp::GetReply>* AsyncgetRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::chirp::GetRequest, ::chirp::GetReply>* PrepareAsyncgetRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chirp::DeleteReply>* AsyncdeletekeyRaw(::grpc::ClientContext* context, const ::chirp::DeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chirp::DeleteReply>* PrepareAsyncdeletekeyRaw(::grpc::ClientContext* context, const ::chirp::DeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chirp::RegisterReply>* AsyncregisteruserRaw(::grpc::ClientContext* context, const ::chirp::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chirp::RegisterReply>* PrepareAsyncregisteruserRaw(::grpc::ClientContext* context, const ::chirp::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chirp::ChirpReply>* AsyncchirpRaw(::grpc::ClientContext* context, const ::chirp::ChirpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chirp::ChirpReply>* PrepareAsyncchirpRaw(::grpc::ClientContext* context, const ::chirp::ChirpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chirp::FollowReply>* AsyncfollowRaw(::grpc::ClientContext* context, const ::chirp::FollowRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chirp::FollowReply>* PrepareAsyncfollowRaw(::grpc::ClientContext* context, const ::chirp::FollowRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chirp::ReadReply>* AsyncreadRaw(::grpc::ClientContext* context, const ::chirp::ReadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chirp::ReadReply>* PrepareAsyncreadRaw(::grpc::ClientContext* context, const ::chirp::ReadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::chirp::MonitorReply>* monitorRaw(::grpc::ClientContext* context, const ::chirp::MonitorRequest& request) override;
    ::grpc::ClientAsyncReader< ::chirp::MonitorReply>* AsyncmonitorRaw(::grpc::ClientContext* context, const ::chirp::MonitorRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::chirp::MonitorReply>* PrepareAsyncmonitorRaw(::grpc::ClientContext* context, const ::chirp::MonitorRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_put_;
    const ::grpc::internal::RpcMethod rpcmethod_get_;
    const ::grpc::internal::RpcMethod rpcmethod_deletekey_;
    const ::grpc::internal::RpcMethod rpcmethod_registeruser_;
    const ::grpc::internal::RpcMethod rpcmethod_chirp_;
    const ::grpc::internal::RpcMethod rpcmethod_follow_;
    const ::grpc::internal::RpcMethod rpcmethod_read_;
    const ::grpc::internal::RpcMethod rpcmethod_monitor_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status put(::grpc::ServerContext* context, const ::chirp::PutRequest* request, ::chirp::PutReply* response);
    virtual ::grpc::Status get(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::chirp::GetReply, ::chirp::GetRequest>* stream);
    virtual ::grpc::Status deletekey(::grpc::ServerContext* context, const ::chirp::DeleteRequest* request, ::chirp::DeleteReply* response);
    virtual ::grpc::Status registeruser(::grpc::ServerContext* context, const ::chirp::RegisterRequest* request, ::chirp::RegisterReply* response);
    virtual ::grpc::Status chirp(::grpc::ServerContext* context, const ::chirp::ChirpRequest* request, ::chirp::ChirpReply* response);
    virtual ::grpc::Status follow(::grpc::ServerContext* context, const ::chirp::FollowRequest* request, ::chirp::FollowReply* response);
    virtual ::grpc::Status read(::grpc::ServerContext* context, const ::chirp::ReadRequest* request, ::chirp::ReadReply* response);
    virtual ::grpc::Status monitor(::grpc::ServerContext* context, const ::chirp::MonitorRequest* request, ::grpc::ServerWriter< ::chirp::MonitorReply>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_put() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status put(::grpc::ServerContext* context, const ::chirp::PutRequest* request, ::chirp::PutReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestput(::grpc::ServerContext* context, ::chirp::PutRequest* request, ::grpc::ServerAsyncResponseWriter< ::chirp::PutReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_get() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::chirp::GetReply, ::chirp::GetRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::chirp::GetReply, ::chirp::GetRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_deletekey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_deletekey() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_deletekey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deletekey(::grpc::ServerContext* context, const ::chirp::DeleteRequest* request, ::chirp::DeleteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdeletekey(::grpc::ServerContext* context, ::chirp::DeleteRequest* request, ::grpc::ServerAsyncResponseWriter< ::chirp::DeleteReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_registeruser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_registeruser() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_registeruser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registeruser(::grpc::ServerContext* context, const ::chirp::RegisterRequest* request, ::chirp::RegisterReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestregisteruser(::grpc::ServerContext* context, ::chirp::RegisterRequest* request, ::grpc::ServerAsyncResponseWriter< ::chirp::RegisterReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_chirp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_chirp() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_chirp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status chirp(::grpc::ServerContext* context, const ::chirp::ChirpRequest* request, ::chirp::ChirpReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestchirp(::grpc::ServerContext* context, ::chirp::ChirpRequest* request, ::grpc::ServerAsyncResponseWriter< ::chirp::ChirpReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_follow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_follow() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_follow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status follow(::grpc::ServerContext* context, const ::chirp::FollowRequest* request, ::chirp::FollowReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestfollow(::grpc::ServerContext* context, ::chirp::FollowRequest* request, ::grpc::ServerAsyncResponseWriter< ::chirp::FollowReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_read() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status read(::grpc::ServerContext* context, const ::chirp::ReadRequest* request, ::chirp::ReadReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestread(::grpc::ServerContext* context, ::chirp::ReadRequest* request, ::grpc::ServerAsyncResponseWriter< ::chirp::ReadReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_monitor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_monitor() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_monitor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status monitor(::grpc::ServerContext* context, const ::chirp::MonitorRequest* request, ::grpc::ServerWriter< ::chirp::MonitorReply>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestmonitor(::grpc::ServerContext* context, ::chirp::MonitorRequest* request, ::grpc::ServerAsyncWriter< ::chirp::MonitorReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_put<WithAsyncMethod_get<WithAsyncMethod_deletekey<WithAsyncMethod_registeruser<WithAsyncMethod_chirp<WithAsyncMethod_follow<WithAsyncMethod_read<WithAsyncMethod_monitor<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_put() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_put<BaseClass>, ::chirp::PutRequest, ::chirp::PutReply>(
          [this](::grpc::ServerContext* context,
                 const ::chirp::PutRequest* request,
                 ::chirp::PutReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->put(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status put(::grpc::ServerContext* context, const ::chirp::PutRequest* request, ::chirp::PutReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void put(::grpc::ServerContext* context, const ::chirp::PutRequest* request, ::chirp::PutReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_get() {
    }
    ~ExperimentalWithCallbackMethod_get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::chirp::GetReply, ::chirp::GetRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_deletekey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_deletekey() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_deletekey<BaseClass>, ::chirp::DeleteRequest, ::chirp::DeleteReply>(
          [this](::grpc::ServerContext* context,
                 const ::chirp::DeleteRequest* request,
                 ::chirp::DeleteReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->deletekey(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_deletekey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deletekey(::grpc::ServerContext* context, const ::chirp::DeleteRequest* request, ::chirp::DeleteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void deletekey(::grpc::ServerContext* context, const ::chirp::DeleteRequest* request, ::chirp::DeleteReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_registeruser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_registeruser() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_registeruser<BaseClass>, ::chirp::RegisterRequest, ::chirp::RegisterReply>(
          [this](::grpc::ServerContext* context,
                 const ::chirp::RegisterRequest* request,
                 ::chirp::RegisterReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->registeruser(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_registeruser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registeruser(::grpc::ServerContext* context, const ::chirp::RegisterRequest* request, ::chirp::RegisterReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void registeruser(::grpc::ServerContext* context, const ::chirp::RegisterRequest* request, ::chirp::RegisterReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_chirp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_chirp() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_chirp<BaseClass>, ::chirp::ChirpRequest, ::chirp::ChirpReply>(
          [this](::grpc::ServerContext* context,
                 const ::chirp::ChirpRequest* request,
                 ::chirp::ChirpReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->chirp(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_chirp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status chirp(::grpc::ServerContext* context, const ::chirp::ChirpRequest* request, ::chirp::ChirpReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void chirp(::grpc::ServerContext* context, const ::chirp::ChirpRequest* request, ::chirp::ChirpReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_follow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_follow() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_follow<BaseClass>, ::chirp::FollowRequest, ::chirp::FollowReply>(
          [this](::grpc::ServerContext* context,
                 const ::chirp::FollowRequest* request,
                 ::chirp::FollowReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->follow(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_follow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status follow(::grpc::ServerContext* context, const ::chirp::FollowRequest* request, ::chirp::FollowReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void follow(::grpc::ServerContext* context, const ::chirp::FollowRequest* request, ::chirp::FollowReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_read() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_read<BaseClass>, ::chirp::ReadRequest, ::chirp::ReadReply>(
          [this](::grpc::ServerContext* context,
                 const ::chirp::ReadRequest* request,
                 ::chirp::ReadReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->read(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status read(::grpc::ServerContext* context, const ::chirp::ReadRequest* request, ::chirp::ReadReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void read(::grpc::ServerContext* context, const ::chirp::ReadRequest* request, ::chirp::ReadReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_monitor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_monitor() {
    }
    ~ExperimentalWithCallbackMethod_monitor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status monitor(::grpc::ServerContext* context, const ::chirp::MonitorRequest* request, ::grpc::ServerWriter< ::chirp::MonitorReply>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  typedef ExperimentalWithCallbackMethod_put<ExperimentalWithCallbackMethod_get<ExperimentalWithCallbackMethod_deletekey<ExperimentalWithCallbackMethod_registeruser<ExperimentalWithCallbackMethod_chirp<ExperimentalWithCallbackMethod_follow<ExperimentalWithCallbackMethod_read<ExperimentalWithCallbackMethod_monitor<Service > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_put() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status put(::grpc::ServerContext* context, const ::chirp::PutRequest* request, ::chirp::PutReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_get() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::chirp::GetReply, ::chirp::GetRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_deletekey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_deletekey() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_deletekey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deletekey(::grpc::ServerContext* context, const ::chirp::DeleteRequest* request, ::chirp::DeleteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_registeruser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_registeruser() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_registeruser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registeruser(::grpc::ServerContext* context, const ::chirp::RegisterRequest* request, ::chirp::RegisterReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_chirp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_chirp() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_chirp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status chirp(::grpc::ServerContext* context, const ::chirp::ChirpRequest* request, ::chirp::ChirpReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_follow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_follow() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_follow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status follow(::grpc::ServerContext* context, const ::chirp::FollowRequest* request, ::chirp::FollowReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_read() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status read(::grpc::ServerContext* context, const ::chirp::ReadRequest* request, ::chirp::ReadReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_monitor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_monitor() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_monitor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status monitor(::grpc::ServerContext* context, const ::chirp::MonitorRequest* request, ::grpc::ServerWriter< ::chirp::MonitorReply>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_put() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status put(::grpc::ServerContext* context, const ::chirp::PutRequest* request, ::chirp::PutReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestput(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_get() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::chirp::GetReply, ::chirp::GetRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_deletekey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_deletekey() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_deletekey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deletekey(::grpc::ServerContext* context, const ::chirp::DeleteRequest* request, ::chirp::DeleteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdeletekey(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_registeruser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_registeruser() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_registeruser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registeruser(::grpc::ServerContext* context, const ::chirp::RegisterRequest* request, ::chirp::RegisterReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestregisteruser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_chirp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_chirp() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_chirp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status chirp(::grpc::ServerContext* context, const ::chirp::ChirpRequest* request, ::chirp::ChirpReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestchirp(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_follow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_follow() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_follow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status follow(::grpc::ServerContext* context, const ::chirp::FollowRequest* request, ::chirp::FollowReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestfollow(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_read() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status read(::grpc::ServerContext* context, const ::chirp::ReadRequest* request, ::chirp::ReadReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestread(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_monitor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_monitor() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_monitor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status monitor(::grpc::ServerContext* context, const ::chirp::MonitorRequest* request, ::grpc::ServerWriter< ::chirp::MonitorReply>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestmonitor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_put() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_put<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->put(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status put(::grpc::ServerContext* context, const ::chirp::PutRequest* request, ::chirp::PutReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void put(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_get() {
    }
    ~ExperimentalWithRawCallbackMethod_get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::chirp::GetReply, ::chirp::GetRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_deletekey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_deletekey() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_deletekey<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->deletekey(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_deletekey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deletekey(::grpc::ServerContext* context, const ::chirp::DeleteRequest* request, ::chirp::DeleteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void deletekey(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_registeruser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_registeruser() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_registeruser<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->registeruser(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_registeruser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registeruser(::grpc::ServerContext* context, const ::chirp::RegisterRequest* request, ::chirp::RegisterReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void registeruser(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_chirp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_chirp() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_chirp<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->chirp(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_chirp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status chirp(::grpc::ServerContext* context, const ::chirp::ChirpRequest* request, ::chirp::ChirpReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void chirp(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_follow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_follow() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_follow<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->follow(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_follow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status follow(::grpc::ServerContext* context, const ::chirp::FollowRequest* request, ::chirp::FollowReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void follow(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_read() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_read<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->read(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status read(::grpc::ServerContext* context, const ::chirp::ReadRequest* request, ::chirp::ReadReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void read(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_monitor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_monitor() {
    }
    ~ExperimentalWithRawCallbackMethod_monitor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status monitor(::grpc::ServerContext* context, const ::chirp::MonitorRequest* request, ::grpc::ServerWriter< ::chirp::MonitorReply>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_put() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::chirp::PutRequest, ::chirp::PutReply>(std::bind(&WithStreamedUnaryMethod_put<BaseClass>::Streamedput, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status put(::grpc::ServerContext* context, const ::chirp::PutRequest* request, ::chirp::PutReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedput(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chirp::PutRequest,::chirp::PutReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_deletekey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_deletekey() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::chirp::DeleteRequest, ::chirp::DeleteReply>(std::bind(&WithStreamedUnaryMethod_deletekey<BaseClass>::Streameddeletekey, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_deletekey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status deletekey(::grpc::ServerContext* context, const ::chirp::DeleteRequest* request, ::chirp::DeleteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameddeletekey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chirp::DeleteRequest,::chirp::DeleteReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_registeruser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_registeruser() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::chirp::RegisterRequest, ::chirp::RegisterReply>(std::bind(&WithStreamedUnaryMethod_registeruser<BaseClass>::Streamedregisteruser, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_registeruser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status registeruser(::grpc::ServerContext* context, const ::chirp::RegisterRequest* request, ::chirp::RegisterReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedregisteruser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chirp::RegisterRequest,::chirp::RegisterReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_chirp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_chirp() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::chirp::ChirpRequest, ::chirp::ChirpReply>(std::bind(&WithStreamedUnaryMethod_chirp<BaseClass>::Streamedchirp, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_chirp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status chirp(::grpc::ServerContext* context, const ::chirp::ChirpRequest* request, ::chirp::ChirpReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedchirp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chirp::ChirpRequest,::chirp::ChirpReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_follow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_follow() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::chirp::FollowRequest, ::chirp::FollowReply>(std::bind(&WithStreamedUnaryMethod_follow<BaseClass>::Streamedfollow, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_follow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status follow(::grpc::ServerContext* context, const ::chirp::FollowRequest* request, ::chirp::FollowReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedfollow(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chirp::FollowRequest,::chirp::FollowReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_read() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::chirp::ReadRequest, ::chirp::ReadReply>(std::bind(&WithStreamedUnaryMethod_read<BaseClass>::Streamedread, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status read(::grpc::ServerContext* context, const ::chirp::ReadRequest* request, ::chirp::ReadReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedread(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chirp::ReadRequest,::chirp::ReadReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_put<WithStreamedUnaryMethod_deletekey<WithStreamedUnaryMethod_registeruser<WithStreamedUnaryMethod_chirp<WithStreamedUnaryMethod_follow<WithStreamedUnaryMethod_read<Service > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_monitor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_monitor() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::SplitServerStreamingHandler< ::chirp::MonitorRequest, ::chirp::MonitorReply>(std::bind(&WithSplitStreamingMethod_monitor<BaseClass>::Streamedmonitor, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_monitor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status monitor(::grpc::ServerContext* context, const ::chirp::MonitorRequest* request, ::grpc::ServerWriter< ::chirp::MonitorReply>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status Streamedmonitor(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::chirp::MonitorRequest,::chirp::MonitorReply>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_monitor<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_put<WithStreamedUnaryMethod_deletekey<WithStreamedUnaryMethod_registeruser<WithStreamedUnaryMethod_chirp<WithStreamedUnaryMethod_follow<WithStreamedUnaryMethod_read<WithSplitStreamingMethod_monitor<Service > > > > > > > StreamedService;
};

}  // namespace chirp


#endif  // GRPC_chirp_2eproto__INCLUDED
